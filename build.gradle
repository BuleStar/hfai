/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'org.springframework.boot' version '3.4.0'
    id "io.freefair.lombok" version "6.6.1"
}

idea {
    module {
        downloadJavadoc = false
        downloadSources = false
    }
}
test {
    enabled(true)
}
repositories {
    maven { url 'https://maven.aliyun.com/repository/public' }
    mavenCentral()
}


dependencies {
    implementation(
            'org.springframework.boot:spring-boot-starter-data-redis-reactive:3.4.0',
            'org.springframework.boot:spring-boot-starter-webflux:3.4.0',
            'org.springframework.boot:spring-boot-starter-validation:3.3.5',
            'com.alibaba:druid-spring-boot-starter:1.2.24',
            'com.baomidou:mybatis-plus-spring-boot3-starter:3.5.9',
            'com.baomidou:mybatis-plus-generator:3.5.9',
            'org.apache.velocity:velocity-engine-core:2.3',
            'com.alibaba:fastjson:1.2.83',
            'cn.hutool:hutool-all:5.8.21',
            'org.apache.commons:commons-lang3',
            'dev.langchain4j:langchain4j-spring-boot-starter:0.35.0',
            'dev.langchain4j:langchain4j-open-ai-spring-boot-starter:0.35.0',
            'dev.langchain4j:langchain4j-reactor:0.35.0',
            'io.github.binance:binance-connector-java:3.4.0',
            'io.github.binance:binance-futures-connector-java:3.0.5',
            'org.telegram:telegrambots:6.9.7.1',
            'org.apache.commons:commons-math3:3.6.1',
            'org.ta4j:ta4j-core:0.17',
            'org.ta4j:ta4j-examples:0.17',
            'org.springframework.boot:spring-boot-starter-mail:3.4.0',
            'com.google.code.gson:gson:2.11.0'
    )
    runtimeOnly(
            'org.springframework.boot:spring-boot-devtools:3.4.0',
            'com.mysql:mysql-connector-j:9.1.0'
    )
    testImplementation(
            'org.springframework.boot:spring-boot-starter-test:3.4.0',
            'io.projectreactor:reactor-test:3.7.0'
    )
}

group = 'com.hf.webflux'
version = '0.0.1-SNAPSHOT'
description = 'hfai'
java.sourceCompatibility = JavaVersion.VERSION_17

// 注册清理旧容器和镜像的任务
tasks.register('cleanup', Exec) {
    group = "docker"
    description = "Stops and removes old Docker container and image if they exist."
    doFirst {
        println "Cleaning up old Docker resources..."
    }
    commandLine 'bash', '-c', '''
        # Stop and remove the running container if it exists
        if docker ps -q --filter "name=hfai" > /dev/null; then
            echo "Stopping and removing old container..."
            docker stop hfai || true
            docker rm hfai || true
        fi

        # Remove the old image if it exists
        if docker images -q hfai:latest > /dev/null; then
            echo "Removing old Docker image..."
            docker rmi -f hfai:latest || true
        fi
    '''
    doLast {
        println "Cleanup complete."
    }
}

// 注册构建 Docker 镜像的任务
tasks.register('buildDocker', Exec) {
    group = "docker"
    description = "Builds the Docker image."
    dependsOn 'cleanup'  // 依赖清理任务
//    onlyIf { !project.hasProperty('skipBuild') }  // 可选跳过构建
    commandLine 'docker', 'build', '-t', 'hfai:latest', '.'
    doFirst {
        println "Building Docker image..."
    }
    doLast {
        println "Docker image built successfully."
    }
}

// 注册运行 Docker 容器的任务
tasks.register('runDocker', Exec) {
    group = "docker"
    description = "Runs the Docker container."
    dependsOn 'buildDocker'  // 依赖构建任务
//    onlyIf { !project.hasProperty('skipRun') }  // 可选跳过运行
    commandLine 'docker', 'run', '-p', '8080:8080', '-d', '--name', 'hfai', '--rm', 'hfai:latest'
    doFirst {
        println "Running Docker container..."
    }
    doLast {
        println "Docker container is running."
    }
}

// 串联任务，提供一个主任务来触发整个流程
tasks.register('deploy') {
    group = "docker"
    description = "Builds and runs the Docker container."
    dependsOn 'runDocker'  // 依赖运行任务
}

